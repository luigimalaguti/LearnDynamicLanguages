
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIV ID LPAR MINUS MUL NUMBER PI PLUS POW RPAR SQRTstatement : assignmentstatement : expressionassignment : ID ASSIGN expressionexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term MUL powerterm : term DIV powerterm : powerpower : factor POW powerpower : factorfactor : NUMBERfactor : LPAR expression RPARfactor : PIfactor : SQRT LPAR expression RPARfactor : ID'
    
_lr_action_items = {'ID':([0,9,12,13,14,15,16,17,20,],[4,19,19,19,19,19,19,19,19,]),'NUMBER':([0,9,12,13,14,15,16,17,20,],[8,8,8,8,8,8,8,8,8,]),'LPAR':([0,9,11,12,13,14,15,16,17,20,],[9,9,20,9,9,9,9,9,9,9,]),'PI':([0,9,12,13,14,15,16,17,20,],[10,10,10,10,10,10,10,10,10,]),'SQRT':([0,9,12,13,14,15,16,17,20,],[11,11,11,11,11,11,11,11,11,]),'$end':([1,2,3,4,5,6,7,8,10,19,21,22,23,24,25,26,27,29,],[0,-1,-2,-16,-6,-9,-11,-12,-14,-16,-4,-5,-3,-7,-8,-10,-13,-15,]),'PLUS':([3,4,5,6,7,8,10,18,19,21,22,23,24,25,26,27,28,29,],[12,-16,-6,-9,-11,-12,-14,12,-16,-4,-5,12,-7,-8,-10,-13,12,-15,]),'MINUS':([3,4,5,6,7,8,10,18,19,21,22,23,24,25,26,27,28,29,],[13,-16,-6,-9,-11,-12,-14,13,-16,-4,-5,13,-7,-8,-10,-13,13,-15,]),'ASSIGN':([4,],[14,]),'POW':([4,7,8,10,19,27,29,],[-16,17,-12,-14,-16,-13,-15,]),'MUL':([4,5,6,7,8,10,19,21,22,24,25,26,27,29,],[-16,15,-9,-11,-12,-14,-16,15,15,-7,-8,-10,-13,-15,]),'DIV':([4,5,6,7,8,10,19,21,22,24,25,26,27,29,],[-16,16,-9,-11,-12,-14,-16,16,16,-7,-8,-10,-13,-15,]),'RPAR':([5,6,7,8,10,18,19,21,22,24,25,26,27,28,29,],[-6,-9,-11,-12,-14,27,-16,-4,-5,-7,-8,-10,-13,29,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'assignment':([0,],[2,]),'expression':([0,9,14,20,],[3,18,23,28,]),'term':([0,9,12,13,14,20,],[5,5,21,22,5,5,]),'power':([0,9,12,13,14,15,16,17,20,],[6,6,6,6,6,24,25,26,6,]),'factor':([0,9,12,13,14,15,16,17,20,],[7,7,7,7,7,7,7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assignment','statement',1,'p_statement_assign','expressions_parser.py',9),
  ('statement -> expression','statement',1,'p_statement_expr','expressions_parser.py',13),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','expressions_parser.py',17),
  ('expression -> expression PLUS term','expression',3,'p_expression_add','expressions_parser.py',22),
  ('expression -> expression MINUS term','expression',3,'p_expression_sub','expressions_parser.py',26),
  ('expression -> term','expression',1,'p_expression_term','expressions_parser.py',30),
  ('term -> term MUL power','term',3,'p_term_mul','expressions_parser.py',34),
  ('term -> term DIV power','term',3,'p_term_div','expressions_parser.py',38),
  ('term -> power','term',1,'p_term_power','expressions_parser.py',42),
  ('power -> factor POW power','power',3,'p_power_raise','expressions_parser.py',46),
  ('power -> factor','power',1,'p_power_factor','expressions_parser.py',50),
  ('factor -> NUMBER','factor',1,'p_factor_num','expressions_parser.py',54),
  ('factor -> LPAR expression RPAR','factor',3,'p_factor_expr','expressions_parser.py',58),
  ('factor -> PI','factor',1,'p_factor_pi','expressions_parser.py',62),
  ('factor -> SQRT LPAR expression RPAR','factor',4,'p_factor_sqrt','expressions_parser.py',66),
  ('factor -> ID','factor',1,'p_factor_id','expressions_parser.py',70),
]
